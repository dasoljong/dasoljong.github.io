{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/var, let, const의 차이","result":{"data":{"markdownRemark":{"id":"a4bc259c-8ab3-598b-949f-f0ecaf7d1eac","html":"<p>자바스크립트의 변수 선언 방식은 세가지로 나눌 수 있다.<br>\nvar, let, 그리고 const.</p>\n<h2>변수 선언 방식</h2>\n<h3>1. var</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Daivd\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// David</span>\n\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// John</span></code></pre></div>\n<p>위와 같이 var는 변수를 한번 더 선언 했음에도 불구하고 에러가 뜨지 않고 각기 다른 값이 출력 됨을 볼 수 있다.\n간단한 코드 상에서는 편리할 수 있겠지만 코드가 길어지고 복잡해진다면 우리가 예상한 결과값이 나오지 않을 수 있다.</p>\n<p>위와 같은 문제를 보완하기 위해서 나온 ES6의 변수 선언 방식이 let과 const다.</p>\n<h3>2. let & const</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Daivd\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// David</span>\n\n<span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Uncaught SyntaxError: Identifier 'name' has already been declared</span></code></pre></div>\n<p>위와 같이 변수 선언 방식을 var에서 let으로 바꾸어 보면 이미 선언되었다는 에러를 볼 수 있다.\n(const로 바꾸어도 같은 에러가 등장한다.)<br>\n즉, let과 const 모두 변수 재선언이 불가능하다.</p>\n<p>그렇다면 let과 const의 차이는 무엇일까?\n바로 재할당의 가능 불가능 여부이다.(immutable)</p>\n<p>let 은 변수에 재할당이 가능하다. 그렇지만,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Daivd\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// David</span>\n\n<span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Uncaught SyntaxError: Identifier 'name' has already been declared</span>\n\nname <span class=\"token operator\">=</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// react</span></code></pre></div>\n<p>const는 변수 재선언, 변수 재할당 모두 불가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Daivd\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// David</span>\n\n<span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Uncaught SyntaxError: Identifier 'name' has already been declared</span>\n\nname <span class=\"token operator\">=</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Uncaught TypeError: Assignment to constant variable.</span></code></pre></div>\n<h2>정리</h2>\n<ul>\n<li>var : es5문법이며, let const와 다르게 호이스팅이 되어 변수의 스코프 범위가 컴포넌트 전체가 된다. (재선언, 재할당 가능)</li>\n<li>let : es6문법이며, var와 다르게 호이스팅이 안됨 (재선언 불가, 재할당 가능)</li>\n<li>const : es6문법이며, let과 마찬가지로 호이스팅이 안됨(재선언, 재할당 모두 불가)</li>\n</ul>\n<p>변수 선언에는 기본적으로 const를 사용하고, 재할당이 필요한 경우에만 let을 사용하도록 한다. 이때, 변수의 scope는 최대한 좁게 만든다.</p>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reference</h3>\n<ul>\n<li><a href=\"https://velog.io/@bathingape/JavaScript-var-let-const-%EC%B0%A8%EC%9D%B4%EC%A0%90\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@bathingape/JavaScript-var-let-const-%EC%B0%A8%EC%9D%B4%EC%A0%90</a></li>\n</ul>","fields":{"slug":"/posts/var, let, const의 차이","tagSlugs":["/tag/var/","/tag/let/","/tag/const/","/tag/변수/"]},"frontmatter":{"date":"2020-04-20T09:46:37.121Z","description":"var, let, const의 차이에 관하여 알아보자","tags":["var","let","const","변수"],"title":"var, let, const의 차이","socialImage":"/media/image-2.jpg"}}},"pageContext":{"slug":"/posts/var, let, const의 차이"}}}