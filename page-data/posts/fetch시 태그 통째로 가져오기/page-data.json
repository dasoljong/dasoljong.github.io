{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/fetch시 태그 통째로 가져오기","result":{"data":{"markdownRemark":{"id":"12b64820-90c7-5cb0-8c02-ab695a25029d","html":"<p>wezard 프로젝트를 진행 중, 백엔드에서 api를 통해 string 형태의 html을 통째로 전달해주는 경우가 발생하였다. 이에 해결 방안을 찾아 공유한다.\n<br><br></p>\n<h2 id=\"발생된-문제\" style=\"position:relative;\"><a href=\"#%EB%B0%9C%EC%83%9D%EB%90%9C-%EB%AC%B8%EC%A0%9C\" aria-label=\"발생된 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>발생된 문제</h2>\n<p>React 메뉴얼에 따르면, 리액트에서는 cross-site scripting(XSS)의 공격을 막기 위해, 렌더링 메소드 내부에 html 형태의 string을 렌더링 하면 태그가 먹히지 않고 문자열 그대로 렌더링 됨을 볼 수 있다.\n이는 일종의 위험을 경고하는 리액트의 경고이다.</p>\n<p>하지만 우리는 이러한 리액트의 경고를 무시하고 우리가 원하는대로 가져올 수 있다.\n그 방법은 <b>‘dangerouslySetInnerHTML’</b>을 사용하는 것이다.</p>\n<p>아래 예시를 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    iconList<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> queryId <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> queryId <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// console.log(\"id\", queryId);</span>\n\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">URL</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/article/detail/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>end<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// console.log(\"드러와:\", res.data);</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>\n          <span class=\"token punctuation\">{</span>\n            data<span class=\"token operator\">:</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>나는 위와 같이 fetch를 통해 data를 불러왔다.\n데이터 내의 여러 필드 중, content필드는 string 형태의 html로 전달되었다.\n이에 평소와 같이 아래와 같이 content를 불러 보았지만 에러가 났다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\n\n<span class=\"token operator\">&lt;</span>MainArticleWrapper<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>Body<span class=\"token operator\">></span>\n              <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Body<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>LineWrapper<span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>DiaLine<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>DiaLine<span class=\"token operator\">></span>\n\n<span class=\"token operator\">...</span></code></pre></div>\n<p>따라서 아래와 같이 ‘dangerouslySetInnerHTML’를 사용하여 원하는 결과물을 볼 수 있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\n\n<span class=\"token operator\">&lt;</span>MainArticleWrapper<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>Body\n              dangerouslySetInnerHTML<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> __html<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>content <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Body<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>LineWrapper<span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>DiaLine<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>DiaLine<span class=\"token operator\">></span>\n\n<span class=\"token operator\">...</span></code></pre></div>\n<p>여기서 주의할 점은, body 태그 사이에 적용하는 것이 아니라 body 태그 내부에 attribute로 사용해야 한다는 것이다.</p>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reference</h3>\n<ul>\n<li><a href=\"https://velopert.com/1896\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velopert.com/1896</a></li>\n</ul>","fields":{"slug":"/posts/fetch시 태그 통째로 가져오기","tagSlugs":["/tag/react/","/tag/frontend/","/tag/fetch/"]},"frontmatter":{"date":"2020-03-20T09:46:37.121Z","description":"fetch시 태그 통째로 가져오기","tags":["React","Frontend","fetch"],"title":"(React) string 형태의 html을 렌더링하기","socialImage":"/media/image-2.jpg"}}},"pageContext":{"slug":"/posts/fetch시 태그 통째로 가져오기"}}}